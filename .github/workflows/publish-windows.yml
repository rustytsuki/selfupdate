name: Publish Windows

on:
    workflow_dispatch:
        inputs:
            tag:
                description: 'Publish Windows'
                required: true
                type: string

    workflow_call:
        inputs:
            tag:
                description: 'Publish Windows'
                required: true
                type: string
        secrets:
            RELEASE:
                required: true

jobs:
    build-win:
        runs-on: windows-2022

        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.tag }}

            - name: Set up Node
              uses: actions/setup-node@v4
              with:
                  node-version: 20

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: |
                      x86_64-pc-windows-msvc
                      aarch64-pc-windows-msvc
                  override: true

            - name: Install dependencies
              run: |
                  npm ci && cd ..

            - name: Extract tag version
              id: extract_version
              env:
                  TAG_NAME: ${{ inputs.tag || github.event.inputs.tag }}
              run: |
                  $tagName = "$env:TAG_NAME"
                  echo "TAG_NAME=$tagName" >> $env:GITHUB_ENV

                  $version = $tagName -replace '^v', ''
                  $parts = $version -split '\.'

                  if ($parts.Length -lt 3) {
                  throw "Invalid version format: $version"
                  }

                  echo "VERSION_MAJOR=$($parts[0])" >> $env:GITHUB_ENV
                  echo "VERSION_MINOR=$($parts[1])" >> $env:GITHUB_ENV
                  echo "VERSION_PATCH=$($parts[2])" >> $env:GITHUB_ENV

            - name: Run publish script for Windows
              working-directory: ./deploy
              env:
                  GH_TOKEN: ${{ secrets.RELEASE }}
                  VERSION_MAJOR: ${{ env.VERSION_MAJOR }}
                  VERSION_MINOR: ${{ env.VERSION_MINOR }}
                  VERSION_PATCH: ${{ env.VERSION_PATCH }}
              run: |
                  cd hello-rust
                  cargo build --release --target x86_64-pc-windows-msvc
                  cargo build --release --target aarch64-pc-windows-msvc
