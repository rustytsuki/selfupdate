name: Publish Linux

on:
    workflow_dispatch:
        inputs:
            tag:
                description: 'Publish Linux'
                required: true
                type: string

    workflow_call:
        inputs:
            tag:
                description: 'Publish Linux'
                required: true
                type: string
        secrets:
            RELEASE:
                required: true

jobs:
    build-linux:
        runs-on: ubuntu-22.04

        steps:
            - name: Checkout repo
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.tag }}

            - name: Set up multiarch and sources.list
              run: |
                  sudo dpkg --add-architecture arm64

                  # clear default sources.list
                  sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak
                  sudo sed -i 's/^deb /deb [arch=amd64] /' /etc/apt/sources.list

                  # add arm64 source, only use ports.ubuntu.com
                  sudo tee -a /etc/apt/sources.list.d/arm64.list > /dev/null <<EOF
                  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main universe multiverse restricted
                  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main universe multiverse restricted
                  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main universe multiverse restricted
                  deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main universe multiverse restricted
                  EOF

                  sudo apt update

            - name: Install toolchain and ARM64 dependencies
              run: |
                  sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
                  sudo apt install -y libxml2:arm64
                  sudo apt install -y libgl1:arm64 libglx-mesa0:arm64

            - name: Install Rust toolchain
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: |
                      aarch64-unknown-linux-gnu
                  override: true

            - name: Extract tag version
              id: extract_version
              env:
                  TAG_NAME: ${{ inputs.tag || github.event.inputs.tag }}
              run: |
                  echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_ENV"

                  VERSION="${TAG_NAME#v}"
                  IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

                  if [ -z "$MAJOR" ] || [ -z "$MINOR" ] || [ -z "$PATCH" ]; then
                  echo "Invalid version format: $VERSION"
                  exit 1
                  fi

                  echo "VERSION_MAJOR=$MAJOR" >> "$GITHUB_ENV"
                  echo "VERSION_MINOR=$MINOR" >> "$GITHUB_ENV"
                  echo "VERSION_PATCH=$PATCH" >> "$GITHUB_ENV"

            - name: Run publish script for Linux(arm64)
              working-directory: ./hello-rust
              env:
                  GH_TOKEN: ${{ secrets.RELEASE }}
                  VERSION_MAJOR: ${{ env.VERSION_MAJOR }}
                  VERSION_MINOR: ${{ env.VERSION_MINOR }}
                  VERSION_PATCH: ${{ env.VERSION_PATCH }}
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
              run: |
                  cargo build --release --target aarch64-unknown-linux-gnu

            - name: Run publish script for Linux(x64)
              working-directory: ./hello-rust
              env:
                  GH_TOKEN: ${{ secrets.RELEASE }}
                  VERSION_MAJOR: ${{ env.VERSION_MAJOR }}
                  VERSION_MINOR: ${{ env.VERSION_MINOR }}
                  VERSION_PATCH: ${{ env.VERSION_PATCH }}
              run: |
                  cargo build --release --target x86_64-unknown-linux-gnu
